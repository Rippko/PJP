# Generated from ./AntlrComponents/ProjectGrammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,31,1,32,4,32,181,8,32,11,32,12,32,182,1,32,1,32,4,32,187,
        8,32,11,32,12,32,188,1,33,1,33,1,33,5,33,194,8,33,10,33,12,33,197,
        9,33,3,33,199,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        3,34,210,8,34,1,35,1,35,5,35,214,8,35,10,35,12,35,217,9,35,1,35,
        1,35,1,36,1,36,5,36,223,8,36,10,36,12,36,226,9,36,1,37,1,37,1,37,
        1,37,5,37,232,8,37,10,37,12,37,235,9,37,1,37,1,37,1,38,4,38,240,
        8,38,11,38,12,38,241,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,
        7,1,0,48,57,1,0,49,57,2,0,34,34,92,92,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,253,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,
        1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,93,1,0,0,0,13,
        98,1,0,0,0,15,101,1,0,0,0,17,106,1,0,0,0,19,112,1,0,0,0,21,115,1,
        0,0,0,23,117,1,0,0,0,25,119,1,0,0,0,27,123,1,0,0,0,29,129,1,0,0,
        0,31,134,1,0,0,0,33,141,1,0,0,0,35,143,1,0,0,0,37,145,1,0,0,0,39,
        147,1,0,0,0,41,149,1,0,0,0,43,151,1,0,0,0,45,153,1,0,0,0,47,155,
        1,0,0,0,49,157,1,0,0,0,51,160,1,0,0,0,53,163,1,0,0,0,55,166,1,0,
        0,0,57,169,1,0,0,0,59,171,1,0,0,0,61,174,1,0,0,0,63,176,1,0,0,0,
        65,180,1,0,0,0,67,198,1,0,0,0,69,209,1,0,0,0,71,211,1,0,0,0,73,220,
        1,0,0,0,75,227,1,0,0,0,77,239,1,0,0,0,79,80,5,46,0,0,80,2,1,0,0,
        0,81,82,5,40,0,0,82,4,1,0,0,0,83,84,5,41,0,0,84,6,1,0,0,0,85,86,
        5,61,0,0,86,8,1,0,0,0,87,88,5,119,0,0,88,89,5,114,0,0,89,90,5,105,
        0,0,90,91,5,116,0,0,91,92,5,101,0,0,92,10,1,0,0,0,93,94,5,114,0,
        0,94,95,5,101,0,0,95,96,5,97,0,0,96,97,5,100,0,0,97,12,1,0,0,0,98,
        99,5,105,0,0,99,100,5,102,0,0,100,14,1,0,0,0,101,102,5,101,0,0,102,
        103,5,108,0,0,103,104,5,115,0,0,104,105,5,101,0,0,105,16,1,0,0,0,
        106,107,5,119,0,0,107,108,5,104,0,0,108,109,5,105,0,0,109,110,5,
        108,0,0,110,111,5,101,0,0,111,18,1,0,0,0,112,113,5,100,0,0,113,114,
        5,111,0,0,114,20,1,0,0,0,115,116,5,123,0,0,116,22,1,0,0,0,117,118,
        5,125,0,0,118,24,1,0,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,
        122,5,116,0,0,122,26,1,0,0,0,123,124,5,102,0,0,124,125,5,108,0,0,
        125,126,5,111,0,0,126,127,5,97,0,0,127,128,5,116,0,0,128,28,1,0,
        0,0,129,130,5,98,0,0,130,131,5,111,0,0,131,132,5,111,0,0,132,133,
        5,108,0,0,133,30,1,0,0,0,134,135,5,115,0,0,135,136,5,116,0,0,136,
        137,5,114,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,140,5,103,
        0,0,140,32,1,0,0,0,141,142,5,59,0,0,142,34,1,0,0,0,143,144,5,44,
        0,0,144,36,1,0,0,0,145,146,5,42,0,0,146,38,1,0,0,0,147,148,5,47,
        0,0,148,40,1,0,0,0,149,150,5,43,0,0,150,42,1,0,0,0,151,152,5,37,
        0,0,152,44,1,0,0,0,153,154,5,33,0,0,154,46,1,0,0,0,155,156,5,45,
        0,0,156,48,1,0,0,0,157,158,5,38,0,0,158,159,5,38,0,0,159,50,1,0,
        0,0,160,161,5,124,0,0,161,162,5,124,0,0,162,52,1,0,0,0,163,164,5,
        61,0,0,164,165,5,61,0,0,165,54,1,0,0,0,166,167,5,33,0,0,167,168,
        5,61,0,0,168,56,1,0,0,0,169,170,5,60,0,0,170,58,1,0,0,0,171,172,
        5,60,0,0,172,173,5,61,0,0,173,60,1,0,0,0,174,175,5,62,0,0,175,62,
        1,0,0,0,176,177,5,62,0,0,177,178,5,61,0,0,178,64,1,0,0,0,179,181,
        7,0,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,
        1,0,0,0,183,184,1,0,0,0,184,186,5,46,0,0,185,187,7,0,0,0,186,185,
        1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,66,1,
        0,0,0,190,199,5,48,0,0,191,195,7,1,0,0,192,194,7,0,0,0,193,192,1,
        0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,199,1,
        0,0,0,197,195,1,0,0,0,198,190,1,0,0,0,198,191,1,0,0,0,199,68,1,0,
        0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,117,0,0,203,210,
        5,101,0,0,204,205,5,102,0,0,205,206,5,97,0,0,206,207,5,108,0,0,207,
        208,5,115,0,0,208,210,5,101,0,0,209,200,1,0,0,0,209,204,1,0,0,0,
        210,70,1,0,0,0,211,215,5,34,0,0,212,214,8,2,0,0,213,212,1,0,0,0,
        214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,
        217,215,1,0,0,0,218,219,5,34,0,0,219,72,1,0,0,0,220,224,7,3,0,0,
        221,223,7,4,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,
        224,225,1,0,0,0,225,74,1,0,0,0,226,224,1,0,0,0,227,228,5,47,0,0,
        228,229,5,47,0,0,229,233,1,0,0,0,230,232,8,5,0,0,231,230,1,0,0,0,
        232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,
        235,233,1,0,0,0,236,237,6,37,0,0,237,76,1,0,0,0,238,240,7,6,0,0,
        239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,
        242,243,1,0,0,0,243,244,6,38,0,0,244,78,1,0,0,0,10,0,182,188,195,
        198,209,215,224,233,241,1,6,0,0
    ]

class ProjectGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    INT_TYPE = 13
    FLOAT_TYPE = 14
    BOOL_TYPE = 15
    STRING_TYPE = 16
    SEMI = 17
    COMMA = 18
    MUL = 19
    DIV = 20
    ADD = 21
    MOD = 22
    NOT = 23
    SUB = 24
    AND = 25
    OR = 26
    EQUALS = 27
    NOT_EQUALS = 28
    LESS_THAN = 29
    LESS_THAN_OR_EQUAL = 30
    GREATER_THAN = 31
    GREATER_THAN_OR_EQUAL = 32
    FLOAT = 33
    INT = 34
    BOOL = 35
    STRING = 36
    ID = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'('", "')'", "'='", "'write'", "'read'", "'if'", "'else'", 
            "'while'", "'do'", "'{'", "'}'", "'int'", "'float'", "'bool'", 
            "'string'", "';'", "','", "'*'", "'/'", "'+'", "'%'", "'!'", 
            "'-'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", "SEMI", 
            "COMMA", "MUL", "DIV", "ADD", "MOD", "NOT", "SUB", "AND", "OR", 
            "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
            "GREATER_THAN_OR_EQUAL", "FLOAT", "INT", "BOOL", "STRING", "ID", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "INT_TYPE", 
                  "FLOAT_TYPE", "BOOL_TYPE", "STRING_TYPE", "SEMI", "COMMA", 
                  "MUL", "DIV", "ADD", "MOD", "NOT", "SUB", "AND", "OR", 
                  "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
                  "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "FLOAT", "INT", 
                  "BOOL", "STRING", "ID", "COMMENT", "WS" ]

    grammarFileName = "ProjectGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


